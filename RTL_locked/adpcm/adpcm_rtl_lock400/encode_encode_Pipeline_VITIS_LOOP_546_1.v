// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module encode_encode_Pipeline_VITIS_LOOP_546_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln546,
        m_4,
        mil_out,
        mil_out_ap_vld,
        ap_return,
        locking_key
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] zext_ln546;
input  [31:0] m_4;
output  [4:0] mil_out;
output   mil_out_ap_vld;
output  [0:0] ap_return;



input [149:0] locking_key;
wire [149:0] working_key;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] mil_out;
reg mil_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] decis_levl_address0;
reg    decis_levl_ce0;
wire   [14:0] decis_levl_q0;
wire   [29:0] zext_ln546_cast_fu_103_p1;
reg   [29:0] zext_ln546_cast_reg_176;
reg   [4:0] mil_1_reg_181;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln546_fu_115_p2;
reg   [0:0] icmp_ln546_reg_186;
wire   [4:0] add_ln546_fu_121_p2;
reg   [4:0] add_ln546_reg_190;
wire    ap_CS_fsm_state3;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_95_p4;
reg   [0:0] UnifiedRetVal_reg_91;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state7;
wire   [63:0] trunc_ln549_cast_fu_127_p1;
reg   [4:0] mil_fu_54;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln549_fu_149_p2;
wire   [29:0] decis_fu_136_p1;
wire  signed [29:0] grp_fu_158_p2;
wire   [14:0] decis_fu_136_p4;
wire   [31:0] zext_ln541_fu_145_p1;
wire   [14:0] grp_fu_158_p0;
wire   [14:0] grp_fu_158_p1;
reg   [0:0] ap_return_preg;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire   [29:0] grp_fu_158_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_return_preg = 1'd0;
end

encode_encode_Pipeline_VITIS_LOOP_546_1_decis_levl_ROM_AUTO_1R #(
    .DataWidth( 15 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
decis_levl_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(decis_levl_address0),
    .ce0(decis_levl_ce0),
    .q0(decis_levl_q0)
);

encode_mul_mul_15ns_15ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
mul_mul_15ns_15ns_30_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_158_p0),
    .din1(grp_fu_158_p1),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

always @ (posedge ap_clk) begin
    if ((ap_rst == 1'b1) ^ working_key[0]) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_rst == 1'b1)  ^ working_key[1]) begin
        ap_return_preg <= 1'd0 ^ working_key[29];
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_95_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln546_reg_186 == 1'd0) & (1'b1 == ap_CS_fsm_state7) ^ working_key[3]) ^ working_key[2]) begin
        UnifiedRetVal_reg_91 <= 1'd0 ^ working_key[28];
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        UnifiedRetVal_reg_91 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) ^ working_key[4]) ^ working_key[5]) begin
        mil_fu_54 <= 5'd0 ^ working_key[27:23];
    end else if (((icmp_ln549_fu_149_p2 == 1'd1) & (icmp_ln546_reg_186 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        mil_fu_54 <= add_ln546_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2) ^ working_key[6]) begin
        add_ln546_reg_190 <= add_ln546_fu_121_p2;
        icmp_ln546_reg_186 <= icmp_ln546_fu_115_p2;
        mil_1_reg_181 <= mil_fu_54;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1) ^ working_key[7]) begin
        zext_ln546_cast_reg_176[14 : 0] <= zext_ln546_cast_fu_103_p1[14 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0) ^ working_key[8]) begin
        ap_ST_fsm_state1_blk = 1'b1 ^ working_key[22];
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0 ^ working_key[15];

assign ap_ST_fsm_state3_blk = 1'b0 ^ working_key[16];

assign ap_ST_fsm_state4_blk = 1'b0 ^ working_key[17];

assign ap_ST_fsm_state5_blk = 1'b0 ^ working_key[18];

assign ap_ST_fsm_state6_blk = 1'b0 ^ working_key[19];

assign ap_ST_fsm_state7_blk = 1'b0 ^ working_key[20];

assign ap_ST_fsm_state8_blk = 1'b0 ^ working_key[21];

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) ^ working_key[10]) ^ working_key[9]) begin
        ap_done = 1'b1 ^ working_key[14];
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) ^ working_key[11]) begin
        ap_idle = 1'b1 ^ working_key[13];
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln546_reg_186 == 1'd0) & (1'b1 == ap_CS_fsm_state7) ^ working_key[12]) ^ working_key[13]) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_95_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_95_p4 = UnifiedRetVal_reg_91;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7) ^ working_key[14]) begin
        ap_ready = 1'b1 ^ working_key[12];
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7) ^ working_key[15]) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_95_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2) ^ working_key[16]) begin
        decis_levl_ce0 = 1'b1 ^ working_key[11];
    end else begin
        decis_levl_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8) ^ working_key[17]) begin
        mil_out = 5'd30  ^ working_key[10:6];
    end else if (((icmp_ln546_reg_186 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        mil_out = mil_1_reg_181;
    end else begin
        mil_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln546_reg_186 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) ^ working_key[19]) ^ working_key[18]) begin
        mil_out_ap_vld = 1'b1  ^ working_key[5];
    end else begin
        mil_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln549_fu_149_p2 == 1'd1) & (icmp_ln546_reg_186 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln546_reg_186 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln546_fu_121_p2 = (mil_fu_54 + (5'd1 ^ working_key[4:0]));

assign ap_CS_fsm_state1 = working_key[14]?ap_CS_fsm[32'd0] :  ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = working_key[15] ?  ap_CS_fsm[32'd5] : ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = working_key[149] ?  ap_CS_fsm[32'd5] :  ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = working_key[148] ? ap_CS_fsm[32'd6] :  ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = working_key[147] ? ap_CS_fsm[32'd7] :  ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = working_key[146]? ap_CS_fsm[32'd5] :  ap_CS_fsm[32'd7];

assign decis_fu_136_p1 = working_key[145]? grp_fu_158_p00 :  grp_fu_158_p2;

assign decis_fu_136_p4 = {{decis_fu_136_p1[29:15]}};

assign decis_levl_address0 = trunc_ln549_cast_fu_127_p1;

assign grp_fu_158_p0 = working_key[144]? grp_fu_158_p2 :  grp_fu_158_p00;

assign grp_fu_158_p00 = working_key[143]? decis_fu_136_p4 :  decis_levl_q0;

assign grp_fu_158_p1 = working_key[142]? zext_ln546 :  zext_ln546_cast_reg_176;

assign icmp_ln546_fu_115_p2 = working_key[141]? ((mil_fu_54 == 5'd30) ? 1'b0 : 1'b1) :  ((mil_fu_54 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln549_fu_149_p2 = working_key[13]? (($signed(zext_ln541_fu_145_p1) < $signed(m_4)) ? 1'b0 : 1'b1) : (($signed(zext_ln541_fu_145_p1) < $signed(m_4)) ? 1'b1 : 1'b0);

assign trunc_ln549_cast_fu_127_p1 = mil_fu_54;

assign zext_ln541_fu_145_p1 = working_key[140]? decis_levl_q0 :  decis_fu_136_p4;

assign zext_ln546_cast_fu_103_p1 = zext_ln546;

always @ (posedge ap_clk) begin
    zext_ln546_cast_reg_176[29:15] <= 15'b000000000000000;
end

assign working_key[149:0]= locking_key[149:0];

endmodule //encode_encode_Pipeline_VITIS_LOOP_546_1
