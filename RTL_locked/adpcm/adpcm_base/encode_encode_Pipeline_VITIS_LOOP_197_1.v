// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module encode_encode_Pipeline_VITIS_LOOP_197_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln188_1,
        sext_ln188,
        xb_2_out,
        xb_2_out_ap_vld,
        xa_2_out,
        xa_2_out_ap_vld,
        tqmf_address0,
        tqmf_ce0,
        tqmf_q0,
        tqmf_address1,
        tqmf_ce1,
        tqmf_q1,
        locking_key
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [37:0] sext_ln188_1;
input  [36:0] sext_ln188;
output  [46:0] xb_2_out;
output   xb_2_out_ap_vld;
output  [46:0] xa_2_out;
output   xa_2_out_ap_vld;
output  [4:0] tqmf_address0;
output   tqmf_ce0;
input  [31:0] tqmf_q0;
output  [4:0] tqmf_address1;
output   tqmf_ce1;
input  [31:0] tqmf_q1;

input [149:0] locking_key;

reg ap_idle;
reg xb_2_out_ap_vld;
reg xa_2_out_ap_vld;
reg tqmf_ce0;
reg tqmf_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln197_fu_173_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] h_address0;
reg    h_ce0;
wire   [14:0] h_q0;
wire   [4:0] h_address1;
reg    h_ce1;
wire   [14:0] h_q1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln197_reg_318;
reg   [0:0] icmp_ln197_reg_318_pp0_iter1_reg;
reg   [0:0] icmp_ln197_reg_318_pp0_iter2_reg;
reg  signed [31:0] tqmf_ptr_load_reg_342;
reg  signed [14:0] h_ptr_load_reg_347;
reg  signed [31:0] tqmf_ptr_1_load_reg_352;
reg  signed [14:0] h_ptr_1_load_reg_357;
wire   [46:0] mul_ln199_fu_228_p2;
reg   [46:0] mul_ln199_reg_362;
wire   [46:0] mul_ln200_fu_240_p2;
reg   [46:0] mul_ln200_reg_367;
wire   [63:0] zext_ln187_fu_194_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln199_fu_206_p1;
reg   [4:0] idx_fu_50;
wire   [4:0] add_ln187_fu_188_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_idx_load;
reg   [3:0] i_fu_54;
wire   [3:0] i_10_fu_179_p2;
reg   [3:0] ap_sig_allocacmp_i_9;
reg   [49:0] xa_fu_58;
wire   [49:0] xa_2_fu_265_p2;
wire  signed [49:0] sext_ln188_cast_fu_142_p1;
reg   [49:0] xb_fu_62;
wire   [49:0] xb_2_fu_274_p2;
wire  signed [49:0] sext_ln188_1_cast_fu_146_p1;
wire    ap_block_pp0_stage0_01001;
wire   [4:0] add_ln199_fu_200_p2;
wire  signed [49:0] sext_ln199_2_fu_262_p1;
wire  signed [49:0] sext_ln200_2_fu_271_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

encode_encode_Pipeline_VITIS_LOOP_197_1_h_ROM_AUTO_1R #(
    .DataWidth( 15 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
h_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(h_address0),
    .ce0(h_ce0),
    .q0(h_q0),
    .address1(h_address1),
    .ce1(h_ce1),
    .q1(h_q1)
);

encode_mul_15s_32s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 47 ))
mul_15s_32s_47_1_1_U1(
    .din0(h_ptr_load_reg_347),
    .din1(tqmf_ptr_load_reg_342),
    .dout(mul_ln199_fu_228_p2)
);

encode_mul_15s_32s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 47 ))
mul_15s_32s_47_1_1_U2(
    .din0(h_ptr_1_load_reg_357),
    .din1(tqmf_ptr_1_load_reg_352),
    .dout(mul_ln200_fu_240_p2)
);

encode_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .locking_key(locking_key[149:0])
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln197_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_54 <= i_10_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln197_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            idx_fu_50 <= add_ln187_fu_188_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            idx_fu_50 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            xa_fu_58 <= sext_ln188_cast_fu_142_p1;
        end else if (((icmp_ln197_reg_318_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            xa_fu_58 <= xa_2_fu_265_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            xb_fu_62 <= sext_ln188_1_cast_fu_146_p1;
        end else if (((icmp_ln197_reg_318_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            xb_fu_62 <= xb_2_fu_274_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln197_reg_318 <= icmp_ln197_fu_173_p2;
        icmp_ln197_reg_318_pp0_iter1_reg <= icmp_ln197_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln197_reg_318 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ptr_1_load_reg_357 <= h_q0;
        h_ptr_load_reg_347 <= h_q1;
        tqmf_ptr_1_load_reg_352 <= tqmf_q0;
        tqmf_ptr_load_reg_342 <= tqmf_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln197_reg_318_pp0_iter2_reg <= icmp_ln197_reg_318_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln197_reg_318_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln199_reg_362 <= mul_ln199_fu_228_p2;
        mul_ln200_reg_367 <= mul_ln200_fu_240_p2;
    end
end

always @ (*) begin
    if (((icmp_ln197_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_9 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_9 = i_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_idx_load = 5'd0;
    end else begin
        ap_sig_allocacmp_idx_load = idx_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce0 = 1'b1;
    end else begin
        h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce1 = 1'b1;
    end else begin
        h_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tqmf_ce0 = 1'b1;
    end else begin
        tqmf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tqmf_ce1 = 1'b1;
    end else begin
        tqmf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_318_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xa_2_out_ap_vld = 1'b1;
    end else begin
        xa_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_318_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xb_2_out_ap_vld = 1'b1;
    end else begin
        xb_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln187_fu_188_p2 = (ap_sig_allocacmp_idx_load + 5'd2);

assign add_ln199_fu_200_p2 = (ap_sig_allocacmp_idx_load + 5'd3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign h_address0 = zext_ln199_fu_206_p1;

assign h_address1 = zext_ln187_fu_194_p1;

assign i_10_fu_179_p2 = (ap_sig_allocacmp_i_9 + 4'd1);

assign icmp_ln197_fu_173_p2 = ((ap_sig_allocacmp_i_9 == 4'd10) ? 1'b1 : 1'b0);

assign sext_ln188_1_cast_fu_146_p1 = $signed(sext_ln188_1);

assign sext_ln188_cast_fu_142_p1 = $signed(sext_ln188);

assign sext_ln199_2_fu_262_p1 = $signed(mul_ln199_reg_362);

assign sext_ln200_2_fu_271_p1 = $signed(mul_ln200_reg_367);

assign tqmf_address0 = zext_ln199_fu_206_p1;

assign tqmf_address1 = zext_ln187_fu_194_p1;

assign xa_2_fu_265_p2 = ($signed(sext_ln199_2_fu_262_p1) + $signed(xa_fu_58));

assign xa_2_out = xa_fu_58[46:0];

assign xb_2_fu_274_p2 = ($signed(sext_ln200_2_fu_271_p1) + $signed(xb_fu_62));

assign xb_2_out = xb_fu_62[46:0];

assign zext_ln187_fu_194_p1 = add_ln187_fu_188_p2;

assign zext_ln199_fu_206_p1 = add_ln199_fu_200_p2;

endmodule //encode_encode_Pipeline_VITIS_LOOP_197_1
