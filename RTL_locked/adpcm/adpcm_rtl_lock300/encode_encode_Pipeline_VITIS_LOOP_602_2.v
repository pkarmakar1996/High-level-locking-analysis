// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module encode_encode_Pipeline_VITIS_LOOP_602_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv8_i45,
        delay_dltx_address0,
        delay_dltx_ce0,
        delay_dltx_q0,
        delay_bpl_address0,
        delay_bpl_ce0,
        delay_bpl_we0,
        delay_bpl_d0,
        delay_bpl_address1,
        delay_bpl_ce1,
        delay_bpl_q1,
        locking_key
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] conv8_i45;
output  [2:0] delay_dltx_address0;
output   delay_dltx_ce0;
input  [15:0] delay_dltx_q0;
output  [2:0] delay_bpl_address0;
output   delay_bpl_ce0;
output   delay_bpl_we0;
output  [31:0] delay_bpl_d0;
output  [2:0] delay_bpl_address1;
output   delay_bpl_ce1;
input  [31:0] delay_bpl_q1;

input[149:0] locking_key;
wire[149: 0] working_key;

reg ap_idle;
reg delay_dltx_ce0;
reg delay_bpl_ce0;
reg delay_bpl_we0;
reg delay_bpl_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln602_fu_103_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [31:0] conv8_i45_cast_fu_91_p1;
reg  signed [31:0] conv8_i45_cast_reg_201;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] delay_bpl_addr_reg_215;
reg   [2:0] delay_bpl_addr_reg_215_pp0_iter1_reg;
reg   [2:0] delay_bpl_addr_reg_215_pp0_iter2_reg;
reg   [2:0] delay_bpl_addr_reg_215_pp0_iter3_reg;
reg  signed [31:0] delay_bpl_load_reg_226;
wire   [63:0] i_7_cast_fu_115_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] i_fu_52;
wire   [2:0] add_ln602_fu_109_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_2;
wire  signed [31:0] grp_fu_188_p2;
wire   [0:0] tmp_fu_130_p3;
wire   [8:0] tmp_1_fu_137_p3;
wire  signed [31:0] sext_ln608_1_fu_145_p1;
wire   [39:0] shl_ln5_fu_158_p3;
wire  signed [39:0] sext_ln608_fu_155_p1;
wire   [39:0] sub_ln608_fu_165_p2;
wire   [31:0] wd3_fu_171_p4;
wire   [31:0] or_ln608_fu_149_p2;
wire  signed [15:0] grp_fu_188_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

encode_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_dltx_q0),
    .din1(grp_fu_188_p1),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

encode_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .locking_key(locking_key[149:0])
);

always @ (posedge ap_clk) begin
    if ((ap_rst == 1'b1) ^ working_key[0] ^ working_key[1]) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_rst == 1'b1) ^ working_key[2] ^ working_key[3]) begin
        ap_done_reg <= 1'b0^ working_key[48];
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0^ working_key[47];
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1^ working_key[46];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_rst == 1'b1) ^ working_key[4] ^ working_key[5]) begin
        ap_enable_reg_pp0_iter1 <= 1'b0^ working_key[45];
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0^ working_key[44];
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_rst == 1'b1)^ working_key[6] ^ working_key[7]) begin
        ap_enable_reg_pp0_iter2 <= 1'b0^ working_key[43];
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_rst == 1'b1)^ working_key[8] ^ working_key[9]) begin
        ap_enable_reg_pp0_iter3 <= 1'b0^ working_key[42];
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_rst == 1'b1)^ working_key[10] ^ working_key[11]) begin
        ap_enable_reg_pp0_iter4 <= 1'b0^ working_key[41];
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) ^ working_key[12] ^ working_key[13]) begin
        if (((icmp_ln602_fu_103_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= add_ln602_fu_109_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))^ working_key[14] ^ working_key[15]) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        conv8_i45_cast_reg_201 <= conv8_i45_cast_fu_91_p1;
        delay_bpl_addr_reg_215_pp0_iter1_reg <= delay_bpl_addr_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001) ^ working_key[16] ^ working_key[17]) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        delay_bpl_addr_reg_215_pp0_iter2_reg <= delay_bpl_addr_reg_215_pp0_iter1_reg;
        delay_bpl_addr_reg_215_pp0_iter3_reg <= delay_bpl_addr_reg_215_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln602_fu_103_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))^ working_key[18] ) begin
        delay_bpl_addr_reg_215 <= i_7_cast_fu_115_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))^ working_key[19]) begin
        delay_bpl_load_reg_226 <= delay_bpl_q1;
    end
end

always @ (*) begin
    if (((icmp_ln602_fu_103_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1^ working_key[40];
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0^ working_key[39];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1^ working_key[38];
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1^ working_key[37];
    end else begin
        ap_idle = 1'b0^ working_key[36];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1^ working_key[35];
    end else begin
        ap_idle_pp0 = 1'b0^ working_key[34];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1^ working_key[33];
    end else begin
        ap_ready_int = 1'b0^ working_key[32];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 3'd0^ working_key[31:29];
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        delay_bpl_ce0 = 1'b1^ working_key[28];
    end else begin
        delay_bpl_ce0 = 1'b0^ working_key[28];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_bpl_ce1 = 1'b1^ working_key[27];
    end else begin
        delay_bpl_ce1 = 1'b0^ working_key[26];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        delay_bpl_we0 = 1'b1 ^ working_key[25];
    end else begin
        delay_bpl_we0 = 1'b0 ^ working_key[24];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_dltx_ce0 = 1'b1 ^ working_key[23];
    end else begin
        delay_dltx_ce0 = 1'b0 ^ working_key[22];
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln602_fu_109_p2 = working_key[0]?(ap_sig_allocacmp_i_2 + 3'd4) :  (ap_sig_allocacmp_i_2 + (3'd1 ^ working_key[21:19]));

assign ap_CS_fsm_pp0_stage0 =  ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = working_key[1]?  (1'b1 == 1'b1) : ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = working_key[2]? (1'b1 == 1'b1): ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = working_key[3]? (1'b1 == 1'b1): ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = working_key[4]? (1'b1 == 1'b1): ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = working_key[13] ? (1'b1 == 1'b1) : ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = working_key[14] ? (1'b1 == 1'b1) : ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = working_key[15] ? (1'b1 == 1'b1) : ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv8_i45_cast_fu_91_p1 = $signed(conv8_i45);

assign delay_bpl_address0 =working_key[5]? delay_bpl_addr_reg_215_pp0_iter1_reg :  delay_bpl_addr_reg_215_pp0_iter3_reg;

assign delay_bpl_address1 = delay_bpl_addr_reg_215_pp0_iter1_reg;

assign delay_bpl_d0 = working_key[6]? wd3_fu_171_p4 : (wd3_fu_171_p4 + or_ln608_fu_149_p2);

assign delay_dltx_address0 = i_7_cast_fu_115_p1;

assign grp_fu_188_p1 = conv8_i45_cast_reg_201;

assign i_7_cast_fu_115_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln602_fu_103_p2 = ((ap_sig_allocacmp_i_2 == (3'd6 ^ working_key[2:0])) ? 1'b1 : 1'b0);

assign or_ln608_fu_149_p2 = working_key[7]? (sext_ln608_1_fu_145_p1 & 32'd18) : (sext_ln608_1_fu_145_p1 | 32'd128);

assign sext_ln608_1_fu_145_p1 = working_key[8]? $signed(sext_ln608_fu_155_p1) : $signed(tmp_1_fu_137_p3);

assign sext_ln608_fu_155_p1 = working_key[9]? delay_bpl_addr_reg_215_pp0_iter3_reg : delay_bpl_load_reg_226;

assign shl_ln5_fu_158_p3 =  working_key[10] ? {{delay_bpl_load_reg_226}, {8'd9 }} : {{delay_bpl_load_reg_226}, {8'd0^ working_key[10:3]}};

assign sub_ln608_fu_165_p2 = working_key[11] ? $signed(shl_ln5_fu_158_p3) : ($signed(shl_ln5_fu_158_p3) - $signed(sext_ln608_fu_155_p1));

assign tmp_1_fu_137_p3 = working_key[12] ? {{tmp_fu_130_p3}, {8'd3}} :  {{tmp_fu_130_p3}, {8'd0 ^ working_key[18:11]}};

assign tmp_fu_130_p3 = grp_fu_188_p2[32'd31];

assign wd3_fu_171_p4 = {{sub_ln608_fu_165_p2[39:8]}};

assign working_key[149:0] = locking_key[149:0];
endmodule //encode_encode_Pipeline_VITIS_LOOP_602_2
